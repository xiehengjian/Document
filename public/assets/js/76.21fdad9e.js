(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{555:function(a,s,t){"use strict";t.r(s);var r=t(4),e=Object(r.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"开篇"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开篇"}},[a._v("#")]),a._v(" 开篇")]),a._v(" "),t("p",[a._v("ps:学习编程时应该跟着敲代码，不要光看，一个是练习熟练度，一个是打字也快啊不是。、")]),a._v(" "),t("p",[a._v("主要是方便后期看，因为代码看描述的不清楚的，看代码才清楚")]),a._v(" "),t("h2",{attrs:{id:"golang的由来"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#golang的由来"}},[a._v("#")]),a._v(" Golang的由来")]),a._v(" "),t("h3",{attrs:{id:"软件开发的挑战"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#软件开发的挑战"}},[a._v("#")]),a._v(" 软件开发的挑战")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("* 多核硬件架构\n* 超大规模分布式计算集群\n* web模式导致的前所未有的开发规模和更新速度\n")])])]),t("p",[a._v("特性")]),a._v(" "),t("ul",[t("li",[a._v("简单，C语言有37个关键字，Go有25个")]),a._v(" "),t("li",[a._v("并发编程")]),a._v(" "),t("li",[a._v("内存管理")]),a._v(" "),t("li",[a._v("垃圾回收")]),a._v(" "),t("li",[a._v("编译类型静态类型语言，高效")]),a._v(" "),t("li",[a._v("简洁清晰的依赖管理、独特的接口类型设计")])]),a._v(" "),t("h3",{attrs:{id:"应用程序入口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用程序入口"}},[a._v("#")]),a._v(" 应用程序入口")]),a._v(" "),t("ol",[t("li",[a._v("必须是main包 "),t("code",[a._v("package main")])]),a._v(" "),t("li",[a._v("必须是main方法 "),t("code",[a._v("func mian()")])]),a._v(" "),t("li",[a._v("文件名不需要是"),t("code",[a._v("main.go")])]),a._v(" "),t("li",[a._v("main方法是没有参数的，可以通过"),t("code",[a._v("os.Args")]),a._v("获取命令行参数")]),a._v(" "),t("li",[a._v("main方法是没有返回值的，不能return，可以通过"),t("code",[a._v("os.Exit()")]),a._v("来退出程序")])]),a._v(" "),t("h3",{attrs:{id:"编写测试程序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编写测试程序"}},[a._v("#")]),a._v(" 编写测试程序")]),a._v(" "),t("ol",[t("li",[a._v("源码文件以"),t("code",[a._v("_text")]),a._v("结尾："),t("code",[a._v("xxx_test.go")])]),a._v(" "),t("li",[a._v("测试方法以"),t("code",[a._v("Test")]),a._v("开头："),t("code",[a._v("func TextXXX(t *testing.T){...}")])])]),a._v(" "),t("h3",{attrs:{id:"变量赋值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量赋值"}},[a._v("#")]),a._v(" 变量赋值")]),a._v(" "),t("p",[a._v("与其他主要编程语言的差异")]),a._v(" "),t("ul",[t("li",[a._v("赋值可以进行自动类型推断")]),a._v(" "),t("li",[a._v("在一个赋值语句中可以对多个变量进行同时赋值")]),a._v(" "),t("li",[a._v("可以用"),t("code",[a._v("a,b=b,a")]),a._v("来交换变量的值")])]),a._v(" "),t("p",[a._v("快速设置连续值")]),a._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("\n  Monday "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("iota")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n  Tuesday\n  Wednesday\n  Thursday\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("\n  Open "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<<")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("iota")]),a._v("\n  Close\n  Pending\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br")])]),t("h3",{attrs:{id:"类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[a._v("#")]),a._v(" 类型转换")]),a._v(" "),t("ol",[t("li",[a._v("Go语言不允许隐式类型转换")]),a._v(" "),t("li",[a._v("别名和原有类型也不能进行隐式类型转换")])]),a._v(" "),t("h3",{attrs:{id:"类型的预定义值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型的预定义值"}},[a._v("#")]),a._v(" 类型的预定义值")]),a._v(" "),t("ol",[t("li",[t("p",[t("code",[a._v("math.MaxInt64")])])]),a._v(" "),t("li",[t("p",[t("code",[a._v("math.MaxFloat64")])])]),a._v(" "),t("li",[t("p",[t("code",[a._v("Math.MaxUint32")])])])]),a._v(" "),t("h3",{attrs:{id:"指针类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指针类型"}},[a._v("#")]),a._v(" 指针类型")]),a._v(" "),t("p",[a._v("与其他主要编程语言的差异")]),a._v(" "),t("ol",[t("li",[a._v("不支持指针运算")]),a._v(" "),t("li",[a._v("string是值类型，其默认的初始化值为空字符串，而不是nil")])]),a._v(" "),t("h3",{attrs:{id:"运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[a._v("#")]),a._v(" 运算符")]),a._v(" "),t("ol",[t("li",[a._v("Go语言没有前置的++和--")])]),a._v(" "),t("h3",{attrs:{id:"map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[a._v("#")]),a._v(" Map")]),a._v(" "),t("ul",[t("li",[a._v("当访问的Key不存在时，仍会返回零值，不能通过返回nil来判断元素是否存在")])]),a._v(" "),t("h3",{attrs:{id:"map与工厂模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map与工厂模式"}},[a._v("#")]),a._v(" Map与工厂模式")]),a._v(" "),t("ul",[t("li",[a._v("Map的value可以是一个方法")]),a._v(" "),t("li",[a._v("与Go的Dock type接口方式一起，可以方便的实现单一方法对象的工厂模式")])]),a._v(" "),t("h3",{attrs:{id:"实现set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现set"}},[a._v("#")]),a._v(" 实现Set")]),a._v(" "),t("p",[a._v("Go的内置集合中没有Set实现，可以map[type]bool")]),a._v(" "),t("ol",[t("li",[a._v("元素的唯一性")]),a._v(" "),t("li",[a._v("基本操作\n"),t("ol",[t("li",[a._v("添加元素")]),a._v(" "),t("li",[a._v("判断元素是否存在")]),a._v(" "),t("li",[a._v("删除元素")]),a._v(" "),t("li",[a._v("元数个数")])])])]),a._v(" "),t("h3",{attrs:{id:"字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[a._v("#")]),a._v(" 字符串")]),a._v(" "),t("p",[a._v("与其他主要编程语言的差异")]),a._v(" "),t("ol",[t("li",[a._v("string是数据类型，不是指针或引用类型")]),a._v(" "),t("li",[a._v("string是只读的byte slice，len函数可以返回它包含的byte数")]),a._v(" "),t("li",[a._v("string的byte数组可以存放任何数据")])]),a._v(" "),t("h3",{attrs:{id:"unicode和utf8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unicode和utf8"}},[a._v("#")]),a._v(" Unicode和UTF8")]),a._v(" "),t("ol",[t("li",[a._v("Unicode是一种字符集")]),a._v(" "),t("li",[a._v("UTF8是unicode的存储实现（转换为字节序列的规则）")])]),a._v(" "),t("h3",{attrs:{id:"常用字符串函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用字符串函数"}},[a._v("#")]),a._v(" 常用字符串函数")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("strings")])]),a._v(" "),t("li",[t("p",[a._v("strcov")])])]),a._v(" "),t("h3",{attrs:{id:"函数：一等公民"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数：一等公民"}},[a._v("#")]),a._v(" 函数：一等公民")]),a._v(" "),t("p",[a._v("与其他编程语言的差异")]),a._v(" "),t("ol",[t("li",[a._v("可以有多个返回值")]),a._v(" "),t("li",[a._v("所有的参数都是值传递，slice，map,channel有传引用的错觉")]),a._v(" "),t("li",[a._v("函数可以作为变量的值")]),a._v(" "),t("li",[a._v("函数可以作为参数和返回值")])]),a._v(" "),t("h3",{attrs:{id:"可变参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可变参数"}},[a._v("#")]),a._v(" 可变参数")]),a._v(" "),t("ol",[t("li",[a._v("参数列表为 "),t("code",[a._v("<name> ...<type>")])]),a._v(" "),t("li",[a._v("函数接收到的是一个数组，通过遍历可以获取参数")])]),a._v(" "),t("h3",{attrs:{id:"延迟运行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#延迟运行"}},[a._v("#")]),a._v(" 延迟运行")]),a._v(" "),t("ul",[t("li",[a._v("即defer函数，栈模式执行")])]),a._v(" "),t("h2",{attrs:{id:"go的面向对象编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#go的面向对象编程"}},[a._v("#")]),a._v(" Go的面向对象编程")]),a._v(" "),t("h3",{attrs:{id:"数据的封装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据的封装"}},[a._v("#")]),a._v(" 数据的封装")]),a._v(" "),t("ul",[t("li",[a._v("结构体")])]),a._v(" "),t("h3",{attrs:{id:"行为的定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#行为的定义"}},[a._v("#")]),a._v(" 行为的定义")]),a._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("func")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("e "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("strcutname"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("func")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("e "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("structname"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//第一种定义方式在实例调用对应方法后，实例的成员会进行值复制，")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//为了避免内存的拷贝，我们使用第二种定义方式")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("h3",{attrs:{id:"接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[a._v("#")]),a._v(" 接口")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("定义")]),a._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("type")]),a._v(" Programmer "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("WriteHelloWorld")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" Code\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])])]),a._v(" "),t("li",[t("p",[a._v("实现")]),a._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("type")]),a._v(" GoProgrammer "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("struct")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("func")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("p "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("GoProgrammer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("WriteHelloWorld")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" Code"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"fmt.Println(\\"Hello World!\\")"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])])])]),a._v(" "),t("p",[a._v("与其他语言的差异")]),a._v(" "),t("ul",[t("li",[a._v("接口为非入侵性，实现不依赖于接口定义")]),a._v(" "),t("li",[a._v("所以接口的定义可以包含在接口使用者包内")])]),a._v(" "),t("h3",{attrs:{id:"错误处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#错误处理"}},[a._v("#")]),a._v(" 错误处理")]),a._v(" "),t("p",[a._v("与其他语言的差异")]),a._v(" "),t("ul",[t("li",[a._v("没有异常机制")]),a._v(" "),t("li",[a._v("error类型实现了error接口")]),a._v(" "),t("li",[a._v("可以通过errors.New来快速创建错误实例")])])])}),[],!1,null,null,null);s.default=e.exports}}]);