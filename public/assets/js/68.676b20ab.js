(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{548:function(s,t,a){"use strict";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[s._v("#")]),s._v(" 链表")]),s._v(" "),a("h2",{attrs:{id:"remove-duplicates-from-sorted-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remove-duplicates-from-sorted-list"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/",target:"_blank",rel:"noopener noreferrer"}},[s._v("remove-duplicates-from-sorted-list"),a("OutboundLink")],1)]),s._v(" "),a("blockquote",[a("p",[s._v("给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。")])]),s._v(" "),a("p",[s._v("分析：")]),s._v(" "),a("ol",[a("li",[s._v("首先需要遍历该链表，所以最外层有一层循环，且循环条件应该是当前结点不为空")]),s._v(" "),a("li",[s._v("在遍历到某一结点时，要判断该结点与后续结点是否重复")]),s._v(" "),a("li",[s._v("如果重复，则将指针跳过一个，即可删除重复的元素。相当于每次删除重复的后一个元素")]),s._v(" "),a("li",[s._v("删除后可能还会重复，因此在当前结点不移动的情况下，还要再次判断当前结点与后续结点是否重复，如此又是一层循环，循环条件即为当前结点与后续结点重复")])]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("deleteDuplicates")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("head "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    current "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" head "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//准备好遍历结点")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" current "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 遍历全部结点")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Val "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Val "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//在有后续结点的前提下，循环判断当前结点与后续结点是否重复")]),s._v("\n            current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        current "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//后移")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" head\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("讨论：")]),s._v(" "),a("ol",[a("li",[s._v("为什么在外层循环判断当前结点是否为空，而在内层循环判断后续结点是否为空。\n"),a("ol",[a("li",[s._v("首先，对于外层结点来说，必不能为空,为空则不用再遍历")]),s._v(" "),a("li",[s._v("其次，当前结点的后续结点随身内层循环的删除是一直在变的，所以每循环一次都要检查")]),s._v(" "),a("li",[s._v("最后，为了保持一定的解耦，每次操作都专注于当前的目的，对于外层循环来说的目的是遍历链表，所以需要检查当前结点是否为空。对于内层循环来说需要比较当前结点和后续结点的值，所以需要这两个结点都不为空，且当前结点已经判断过，所以只判断后续结点即可。")]),s._v(" "),a("li",[s._v("所以，如果两个判定都可以放在外层，那还是放在外层好，少一次判断节省开销。")])])])]),s._v(" "),a("h2",{attrs:{id:"remove-duplicates-from-sorted-list-ii"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remove-duplicates-from-sorted-list-ii"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/",target:"_blank",rel:"noopener noreferrer"}},[s._v("remove-duplicates-from-sorted-list-ii"),a("OutboundLink")],1)]),s._v(" "),a("blockquote",[a("p",[s._v("给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中  没有重复出现的数字。")])]),s._v(" "),a("p",[s._v("分析：")]),s._v(" "),a("ol",[a("li",[s._v("首先需要遍历该链表，所以最外层有一层循环，且循环条件应该是当前结点不为空")]),s._v(" "),a("li",[s._v("由于重复的数字都要删除，所以头结点可能也会被删除，所以用哑巴结点当头结点，即当前结点必须是不重复与后继节点")]),s._v(" "),a("li",[s._v("因此新的头结点定不重复，判断头结点的后续结点与后续后续结点是否重复，重复的话将当前结点的后续指针挑一个。相当于每次删除重复的前一个元素。所以循环条件是后面两个结点不为空且相等")]),s._v(" "),a("li",[s._v("如此循环判断之后，最后剩下了一个重复的最后一个，所以需要循环结束后再删一次")]),s._v(" "),a("li",[s._v("但是如果没有重复，即没有进入内层循环，则不需要再删一次，因此需要一个标志位判断是否删除了结点，是否进入了循环")]),s._v(" "),a("li",[s._v("再次删除时需要用的Next，所以还需要Next不为空")]),s._v(" "),a("li",[s._v("当重复的元素均删除完毕后，由于无法确定最终的Next与Next.Next是否相等，所以不能将指针后移，而是继续进入循环判断")]),s._v(" "),a("li",[s._v("最后要将标志位清零")])]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("deleteDuplicates")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("head "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" head "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" head\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    dummy "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("Val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    dummy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" head\n    head "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" dummy\n\n    cur"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v("head \n    flag"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" cur"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Val"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next\n            flag"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" flag"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        cur"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        flag"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" dummy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("h2",{attrs:{id:"reverse-linked-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reverse-linked-list"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"}},[s._v("reverse-linked-list"),a("OutboundLink")],1)]),s._v(" "),a("blockquote",[a("p",[s._v("反转一个单链表。")])]),s._v(" "),a("p",[s._v("分析：")]),s._v(" "),a("ol",[a("li",[s._v("首先需要遍历该链表，所以最外层有一层循环，且循环条件应该是当前结点不为空")]),s._v(" "),a("li",[s._v("用三个变量，分别代表前继结点、当前结点、后续结点。")]),s._v(" "),a("li",[s._v("然后将cur.Next=pre,pre=ßcur,cur=next,next=next.Next")]),s._v(" "),a("li",[s._v("当cur遍历到最后一个时，next已经为nil,不能也不需要再往后移位，因此next移位时需要加个判定")]),s._v(" "),a("li",[s._v("最后循环结束后，cur为nil，pre为最后一个，因此返回pre")])]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("reverseList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("head "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" head "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" head\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" pre "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode\n    cur"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v("head \n    next"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" cur"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("pre \n        pre"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("cur \n        cur"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("next \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" next"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            next"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" pre\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("h2",{attrs:{id:"reverse-linked-list-ii"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reverse-linked-list-ii"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-linked-list-ii/",target:"_blank",rel:"noopener noreferrer"}},[s._v("reverse-linked-list-ii"),a("OutboundLink")],1)]),s._v(" "),a("blockquote",[a("p",[s._v("反转从位置  "),a("em",[s._v("m")]),s._v(" 到  "),a("em",[s._v("n")]),s._v(" 的链表。请使用一趟扫描完成反转。")])]),s._v(" "),a("p",[s._v("分析：")]),s._v(" "),a("ol",[a("li",[s._v("首先需要遍历该链表，所以最外层有一层循环，且循环条件应该是当前结点不为空")]),s._v(" "),a("li",[s._v("前m-1个保持不变，用一个变量记住第m-1个结点，然后从第m个开始反转")]),s._v(" "),a("li",[s._v("由于第m-1的next指针任然指向第m个，即反转后的最后一个，所以通过(m-1).Next.Next=n.next可拼接后续，然后m-1.Next=n即可")])]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("reverseBetween")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("head "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" m "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" head"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" head\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    dummy"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("Val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    dummy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("head\n    head"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("dummy\n    cur"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v("head \n    i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" preM "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" cur"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            preM"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("cur\n            cur"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        cur"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" pre "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ListNode\n    next"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" cur"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("pre\n        preM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("next\n        preM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("cur\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("pre \n        pre"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("cur \n        cur"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("next \n        i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" next"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            next"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" dummy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Next\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br")])]),a("h2",{attrs:{id:"merge-two-sorted-lists"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge-two-sorted-lists"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"https://leetcode-cn.com/problems/merge-two-sorted-lists/",target:"_blank",rel:"noopener noreferrer"}},[s._v("merge-two-sorted-lists"),a("OutboundLink")],1)]),s._v(" "),a("blockquote",[a("p",[s._v("将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。")])])])}),[],!1,null,null,null);t.default=e.exports}}]);