(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{541:function(t,e,r){"use strict";r.r(e);var o=r(4),s=Object(o.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"左程云"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#左程云"}},[t._v("#")]),t._v(" 左程云")]),t._v(" "),r("blockquote",[r("p",[t._v("已知一个搜索二叉树后序遍历的数组"),r("code",[t._v("posArr")]),t._v("，请根据"),r("code",[t._v("posArr")]),t._v("重建整颗树，并返回新建树的头结点")])]),t._v(" "),r("p",[t._v("分析：")]),t._v(" "),r("ol",[r("li",[t._v("由于后序遍历的顺序是左、右、根。所以整个二叉树的头结点应该是数组的最后一个元素")]),t._v(" "),r("li",[t._v("又由于搜索二叉树中，左结点<根节点<有节点，所以数组中小于最后一个元素的值都应该是其左子树，其余则是右子树")]),t._v(" "),r("li",[t._v("然后在左右子树里递归的找头结点和左右子树即可")])]),t._v(" "),r("blockquote",[r("p",[t._v("给定长度为m的字符串aim，以及一个长度为n的字符串str,能否在str中找到一个长度为m的连续子串。使得这个子串刚好由aim的m个字符组成，顺序无所谓。返回任意满足条件的一个子串的起始位置，未找到返回-1")])])])}),[],!1,null,null,null);e.default=s.exports}}]);